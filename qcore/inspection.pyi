import inspect
import types
from typing import (
    Any,
    Callable,
    Iterable,
    List,
    Mapping,
    Sequence,
    Type,
    TypeVar,
    Union,
)

_AnyCallable = TypeVar("_AnyCallable", bound=Callable[..., Any])
_T = TypeVar("_T")

def get_original_fn(fn: Callable[..., Any]) -> Callable[..., Any]: ...
def get_full_name(src: object) -> str: ...
def get_function_call_str(
    fn: Callable[..., Any], args: Iterable[object], kwargs: Mapping[str, object]
) -> str: ...
def get_function_call_repr(
    fn: Callable[..., Any], args: Iterable[object], kwargs: Mapping[str, object]
) -> str: ...
def getargspec(
    func: Union[types.FunctionType, types.MethodType, Callable[..., Any]]
) -> inspect.ArgSpec: ...
def is_cython_or_generator(fn: object) -> bool: ...
def is_cython_function(fn: object) -> bool: ...
def is_cython_class(cls: Type[object]) -> bool: ...
def is_classmethod(fn: object) -> bool: ...
def wraps(
    wrapped: _AnyCallable, assigned: Sequence[str] = ..., updated: Sequence[str] = ...
) -> Callable[[_AnyCallable], _AnyCallable]: ...
def get_subclass_tree(cls: Type[_T], ensure_unique: bool = ...) -> List[Type[_T]]: ...
def lazy_stack() -> Iterable[types.FrameType]: ...
